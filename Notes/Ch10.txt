* catamorphism: a means of deconstructing data. If the spine of a list is the structure of a list, then a fold is what can reduce that structure. Catamorphism can break down the structure but that structure might be rebuilt, so to speak, during evaluation. That is folds can return lists as results.
* catamorphism is a generalization of folds to arbitrary datatypes. eg: maybe :: b -> (a -> b) -> Maybe a -> b
* foldr vs foldl vs foldl': foldl must evaluate its whole spine before it statrt evaluating values in each cell so it accumulates a pile of unevaluated values as it tranerses the spine. if you need the behaviour of foldl you should use foldl' for performance reasons which has strict evaluation, i.e. it has less negative effect on performance over long lists.
* foldr f z xs = foldl (flip f) z (reverse xs)
* foldl only begins to produce values after reaching the end of the list unlike foldr. the next invocation of foldr is conditional on f having asked for more of the results of having folded the list.
* scanr (+) 0 [1..3] ~ [6, 5, 3, 0]
* scanl (+) 0 [1..3] ~ [0, 3, 5, 6]
* tail call: the final result of a function. eg: f x y z = h (sth x y z) where sth x y z = g x y z ~~> tail call is h (sth x y z)
* tail recursion: a func whose tail calls are recursive invocations of itself. eg: the prev eg isn't tail rec. but f x y z = f (x-1) y z is.